// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Variable /> can render 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Variable
    fieldId="bar"
    form="foo"
    handleDelete={[MockFunction]}
    hasSubmitFailed={false}
    isDirty={false}
    isInvalid={false}
    resetOptions={[MockFunction]}
    variableType={null}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "children": <FormSection
        component="div"
        name="bar"
      >
        <Connect(Guided)
          contentId="guidance.codebook.type.variable"
        >
          <div>
            <div
              data-name="Variable label"
              id="field_nodejs_label"
            />
            <Validated
              component={[Function]}
              label="Label"
              name="label"
              onChange={[Function]}
              validation={
                Object {
                  "required": true,
                }
              }
            />
            <div
              data-name="Variable name"
              id="field_nodejs_name"
            />
            <Validated
              component={[Function]}
              label="Name"
              name="name"
              normalize={[Function]}
              validation={
                Object {
                  "required": true,
                }
              }
            />
            <Field
              component={[Function]}
              label="Description"
              name="description"
            />
            <div
              data-name="Variable type"
              id="field_nodejs_type"
            />
            <Validated
              className="form-field-container"
              component={[Function]}
              label="Variable type"
              name="type"
              onChange={[MockFunction]}
              options={
                Array [
                  Object {
                    "label": "text",
                    "value": "text",
                  },
                  Object {
                    "label": "number",
                    "value": "number",
                  },
                  Object {
                    "label": "datetime",
                    "value": "datetime",
                  },
                  Object {
                    "label": "boolean",
                    "value": "boolean",
                  },
                  Object {
                    "label": "ordinal",
                    "value": "ordinal",
                  },
                  Object {
                    "label": "categorical",
                    "value": "categorical",
                  },
                  Object {
                    "label": "layout",
                    "value": "layout",
                  },
                  Object {
                    "label": "location",
                    "value": "location",
                  },
                ]
              }
              placeHolder="— Select variable type —"
              validation={
                Object {
                  "required": true,
                }
              }
            />
          </div>
        </Connect(Guided)>
      </FormSection>,
      "className": "type-editor-variable",
      "handleDelete": [MockFunction],
      "lockOpen": false,
      "open": false,
      "preview": <FormSection
        component="div"
        name="bar"
      >
        <h3
          className="variable__preview-title"
        >
          <Field
            component={[Function]}
            name="name"
          />
           : 
          <em>
            <Field
              component={[Function]}
              name="type"
            />
          </em>
        </h3>
        <p
          className="variable__preview-description"
        >
          <Field
            component={[Function]}
            name="description"
          />
        </p>
      </FormSection>,
      "sortable": false,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <Connect(Guided)
          contentId="guidance.codebook.type.variable"
        >
          <div>
            <div
              data-name="Variable label"
              id="field_nodejs_label"
            />
            <Validated
              component={[Function]}
              label="Label"
              name="label"
              onChange={[Function]}
              validation={
                Object {
                  "required": true,
                }
              }
            />
            <div
              data-name="Variable name"
              id="field_nodejs_name"
            />
            <Validated
              component={[Function]}
              label="Name"
              name="name"
              normalize={[Function]}
              validation={
                Object {
                  "required": true,
                }
              }
            />
            <Field
              component={[Function]}
              label="Description"
              name="description"
            />
            <div
              data-name="Variable type"
              id="field_nodejs_type"
            />
            <Validated
              className="form-field-container"
              component={[Function]}
              label="Variable type"
              name="type"
              onChange={[MockFunction]}
              options={
                Array [
                  Object {
                    "label": "text",
                    "value": "text",
                  },
                  Object {
                    "label": "number",
                    "value": "number",
                  },
                  Object {
                    "label": "datetime",
                    "value": "datetime",
                  },
                  Object {
                    "label": "boolean",
                    "value": "boolean",
                  },
                  Object {
                    "label": "ordinal",
                    "value": "ordinal",
                  },
                  Object {
                    "label": "categorical",
                    "value": "categorical",
                  },
                  Object {
                    "label": "layout",
                    "value": "layout",
                  },
                  Object {
                    "label": "location",
                    "value": "location",
                  },
                ]
              }
              placeHolder="— Select variable type —"
              validation={
                Object {
                  "required": true,
                }
              }
            />
          </div>
        </Connect(Guided)>,
        "component": "div",
        "name": "bar",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <div>
            <div
              data-name="Variable label"
              id="field_nodejs_label"
            />
            <Validated
              component={[Function]}
              label="Label"
              name="label"
              onChange={[Function]}
              validation={
                Object {
                  "required": true,
                }
              }
            />
            <div
              data-name="Variable name"
              id="field_nodejs_name"
            />
            <Validated
              component={[Function]}
              label="Name"
              name="name"
              normalize={[Function]}
              validation={
                Object {
                  "required": true,
                }
              }
            />
            <Field
              component={[Function]}
              label="Description"
              name="description"
            />
            <div
              data-name="Variable type"
              id="field_nodejs_type"
            />
            <Validated
              className="form-field-container"
              component={[Function]}
              label="Variable type"
              name="type"
              onChange={[MockFunction]}
              options={
                Array [
                  Object {
                    "label": "text",
                    "value": "text",
                  },
                  Object {
                    "label": "number",
                    "value": "number",
                  },
                  Object {
                    "label": "datetime",
                    "value": "datetime",
                  },
                  Object {
                    "label": "boolean",
                    "value": "boolean",
                  },
                  Object {
                    "label": "ordinal",
                    "value": "ordinal",
                  },
                  Object {
                    "label": "categorical",
                    "value": "categorical",
                  },
                  Object {
                    "label": "layout",
                    "value": "layout",
                  },
                  Object {
                    "label": "location",
                    "value": "location",
                  },
                ]
              }
              placeHolder="— Select variable type —"
              validation={
                Object {
                  "required": true,
                }
              }
            />
          </div>,
          "contentId": "guidance.codebook.type.variable",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <div
                data-name="Variable label"
                id="field_nodejs_label"
              />,
              <Validated
                component={[Function]}
                label="Label"
                name="label"
                onChange={[Function]}
                validation={
                  Object {
                    "required": true,
                  }
                }
              />,
              <div
                data-name="Variable name"
                id="field_nodejs_name"
              />,
              <Validated
                component={[Function]}
                label="Name"
                name="name"
                normalize={[Function]}
                validation={
                  Object {
                    "required": true,
                  }
                }
              />,
              <Field
                component={[Function]}
                label="Description"
                name="description"
              />,
              <div
                data-name="Variable type"
                id="field_nodejs_type"
              />,
              <Validated
                className="form-field-container"
                component={[Function]}
                label="Variable type"
                name="type"
                onChange={[MockFunction]}
                options={
                  Array [
                    Object {
                      "label": "text",
                      "value": "text",
                    },
                    Object {
                      "label": "number",
                      "value": "number",
                    },
                    Object {
                      "label": "datetime",
                      "value": "datetime",
                    },
                    Object {
                      "label": "boolean",
                      "value": "boolean",
                    },
                    Object {
                      "label": "ordinal",
                      "value": "ordinal",
                    },
                    Object {
                      "label": "categorical",
                      "value": "categorical",
                    },
                    Object {
                      "label": "layout",
                      "value": "layout",
                    },
                    Object {
                      "label": "location",
                      "value": "location",
                    },
                  ]
                }
                placeHolder="— Select variable type —"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />,
              false,
              null,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "data-name": "Variable label",
                "id": "field_nodejs_label",
              },
              "ref": null,
              "rendered": null,
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": "Label",
                "name": "label",
                "onChange": [Function],
                "validation": Object {
                  "required": true,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "data-name": "Variable name",
                "id": "field_nodejs_name",
              },
              "ref": null,
              "rendered": null,
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": "Name",
                "name": "name",
                "normalize": [Function],
                "validation": Object {
                  "required": true,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "component": [Function],
                "label": "Description",
                "name": "description",
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "data-name": "Variable type",
                "id": "field_nodejs_type",
              },
              "ref": null,
              "rendered": null,
              "type": "div",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "className": "form-field-container",
                "component": [Function],
                "label": "Variable type",
                "name": "type",
                "onChange": [MockFunction],
                "options": Array [
                  Object {
                    "label": "text",
                    "value": "text",
                  },
                  Object {
                    "label": "number",
                    "value": "number",
                  },
                  Object {
                    "label": "datetime",
                    "value": "datetime",
                  },
                  Object {
                    "label": "boolean",
                    "value": "boolean",
                  },
                  Object {
                    "label": "ordinal",
                    "value": "ordinal",
                  },
                  Object {
                    "label": "categorical",
                    "value": "categorical",
                  },
                  Object {
                    "label": "layout",
                    "value": "layout",
                  },
                  Object {
                    "label": "location",
                    "value": "location",
                  },
                ],
                "placeHolder": "— Select variable type —",
                "validation": Object {
                  "required": true,
                },
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            false,
            null,
          ],
          "type": "div",
        },
        "type": [Function],
      },
      "type": [Function],
    },
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": <FormSection
          component="div"
          name="bar"
        >
          <Connect(Guided)
            contentId="guidance.codebook.type.variable"
          >
            <div>
              <div
                data-name="Variable label"
                id="field_nodejs_label"
              />
              <Validated
                component={[Function]}
                label="Label"
                name="label"
                onChange={[Function]}
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
              <div
                data-name="Variable name"
                id="field_nodejs_name"
              />
              <Validated
                component={[Function]}
                label="Name"
                name="name"
                normalize={[Function]}
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
              <Field
                component={[Function]}
                label="Description"
                name="description"
              />
              <div
                data-name="Variable type"
                id="field_nodejs_type"
              />
              <Validated
                className="form-field-container"
                component={[Function]}
                label="Variable type"
                name="type"
                onChange={[MockFunction]}
                options={
                  Array [
                    Object {
                      "label": "text",
                      "value": "text",
                    },
                    Object {
                      "label": "number",
                      "value": "number",
                    },
                    Object {
                      "label": "datetime",
                      "value": "datetime",
                    },
                    Object {
                      "label": "boolean",
                      "value": "boolean",
                    },
                    Object {
                      "label": "ordinal",
                      "value": "ordinal",
                    },
                    Object {
                      "label": "categorical",
                      "value": "categorical",
                    },
                    Object {
                      "label": "layout",
                      "value": "layout",
                    },
                    Object {
                      "label": "location",
                      "value": "location",
                    },
                  ]
                }
                placeHolder="— Select variable type —"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>
          </Connect(Guided)>
        </FormSection>,
        "className": "type-editor-variable",
        "handleDelete": [MockFunction],
        "lockOpen": false,
        "open": false,
        "preview": <FormSection
          component="div"
          name="bar"
        >
          <h3
            className="variable__preview-title"
          >
            <Field
              component={[Function]}
              name="name"
            />
             : 
            <em>
              <Field
                component={[Function]}
                name="type"
              />
            </em>
          </h3>
          <p
            className="variable__preview-description"
          >
            <Field
              component={[Function]}
              name="description"
            />
          </p>
        </FormSection>,
        "sortable": false,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": <Connect(Guided)
            contentId="guidance.codebook.type.variable"
          >
            <div>
              <div
                data-name="Variable label"
                id="field_nodejs_label"
              />
              <Validated
                component={[Function]}
                label="Label"
                name="label"
                onChange={[Function]}
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
              <div
                data-name="Variable name"
                id="field_nodejs_name"
              />
              <Validated
                component={[Function]}
                label="Name"
                name="name"
                normalize={[Function]}
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
              <Field
                component={[Function]}
                label="Description"
                name="description"
              />
              <div
                data-name="Variable type"
                id="field_nodejs_type"
              />
              <Validated
                className="form-field-container"
                component={[Function]}
                label="Variable type"
                name="type"
                onChange={[MockFunction]}
                options={
                  Array [
                    Object {
                      "label": "text",
                      "value": "text",
                    },
                    Object {
                      "label": "number",
                      "value": "number",
                    },
                    Object {
                      "label": "datetime",
                      "value": "datetime",
                    },
                    Object {
                      "label": "boolean",
                      "value": "boolean",
                    },
                    Object {
                      "label": "ordinal",
                      "value": "ordinal",
                    },
                    Object {
                      "label": "categorical",
                      "value": "categorical",
                    },
                    Object {
                      "label": "layout",
                      "value": "layout",
                    },
                    Object {
                      "label": "location",
                      "value": "location",
                    },
                  ]
                }
                placeHolder="— Select variable type —"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>
          </Connect(Guided)>,
          "component": "div",
          "name": "bar",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "children": <div>
              <div
                data-name="Variable label"
                id="field_nodejs_label"
              />
              <Validated
                component={[Function]}
                label="Label"
                name="label"
                onChange={[Function]}
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
              <div
                data-name="Variable name"
                id="field_nodejs_name"
              />
              <Validated
                component={[Function]}
                label="Name"
                name="name"
                normalize={[Function]}
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
              <Field
                component={[Function]}
                label="Description"
                name="description"
              />
              <div
                data-name="Variable type"
                id="field_nodejs_type"
              />
              <Validated
                className="form-field-container"
                component={[Function]}
                label="Variable type"
                name="type"
                onChange={[MockFunction]}
                options={
                  Array [
                    Object {
                      "label": "text",
                      "value": "text",
                    },
                    Object {
                      "label": "number",
                      "value": "number",
                    },
                    Object {
                      "label": "datetime",
                      "value": "datetime",
                    },
                    Object {
                      "label": "boolean",
                      "value": "boolean",
                    },
                    Object {
                      "label": "ordinal",
                      "value": "ordinal",
                    },
                    Object {
                      "label": "categorical",
                      "value": "categorical",
                    },
                    Object {
                      "label": "layout",
                      "value": "layout",
                    },
                    Object {
                      "label": "location",
                      "value": "location",
                    },
                  ]
                }
                placeHolder="— Select variable type —"
                validation={
                  Object {
                    "required": true,
                  }
                }
              />
            </div>,
            "contentId": "guidance.codebook.type.variable",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                <div
                  data-name="Variable label"
                  id="field_nodejs_label"
                />,
                <Validated
                  component={[Function]}
                  label="Label"
                  name="label"
                  onChange={[Function]}
                  validation={
                    Object {
                      "required": true,
                    }
                  }
                />,
                <div
                  data-name="Variable name"
                  id="field_nodejs_name"
                />,
                <Validated
                  component={[Function]}
                  label="Name"
                  name="name"
                  normalize={[Function]}
                  validation={
                    Object {
                      "required": true,
                    }
                  }
                />,
                <Field
                  component={[Function]}
                  label="Description"
                  name="description"
                />,
                <div
                  data-name="Variable type"
                  id="field_nodejs_type"
                />,
                <Validated
                  className="form-field-container"
                  component={[Function]}
                  label="Variable type"
                  name="type"
                  onChange={[MockFunction]}
                  options={
                    Array [
                      Object {
                        "label": "text",
                        "value": "text",
                      },
                      Object {
                        "label": "number",
                        "value": "number",
                      },
                      Object {
                        "label": "datetime",
                        "value": "datetime",
                      },
                      Object {
                        "label": "boolean",
                        "value": "boolean",
                      },
                      Object {
                        "label": "ordinal",
                        "value": "ordinal",
                      },
                      Object {
                        "label": "categorical",
                        "value": "categorical",
                      },
                      Object {
                        "label": "layout",
                        "value": "layout",
                      },
                      Object {
                        "label": "location",
                        "value": "location",
                      },
                    ]
                  }
                  placeHolder="— Select variable type —"
                  validation={
                    Object {
                      "required": true,
                    }
                  }
                />,
                false,
                null,
              ],
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "data-name": "Variable label",
                  "id": "field_nodejs_label",
                },
                "ref": null,
                "rendered": null,
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "label": "Label",
                  "name": "label",
                  "onChange": [Function],
                  "validation": Object {
                    "required": true,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "data-name": "Variable name",
                  "id": "field_nodejs_name",
                },
                "ref": null,
                "rendered": null,
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "label": "Name",
                  "name": "name",
                  "normalize": [Function],
                  "validation": Object {
                    "required": true,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "component": [Function],
                  "label": "Description",
                  "name": "description",
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "data-name": "Variable type",
                  "id": "field_nodejs_type",
                },
                "ref": null,
                "rendered": null,
                "type": "div",
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "className": "form-field-container",
                  "component": [Function],
                  "label": "Variable type",
                  "name": "type",
                  "onChange": [MockFunction],
                  "options": Array [
                    Object {
                      "label": "text",
                      "value": "text",
                    },
                    Object {
                      "label": "number",
                      "value": "number",
                    },
                    Object {
                      "label": "datetime",
                      "value": "datetime",
                    },
                    Object {
                      "label": "boolean",
                      "value": "boolean",
                    },
                    Object {
                      "label": "ordinal",
                      "value": "ordinal",
                    },
                    Object {
                      "label": "categorical",
                      "value": "categorical",
                    },
                    Object {
                      "label": "layout",
                      "value": "layout",
                    },
                    Object {
                      "label": "location",
                      "value": "location",
                    },
                  ],
                  "placeHolder": "— Select variable type —",
                  "validation": Object {
                    "required": true,
                  },
                },
                "ref": null,
                "rendered": null,
                "type": [Function],
              },
              false,
              null,
            ],
            "type": "div",
          },
          "type": [Function],
        },
        "type": [Function],
      },
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
