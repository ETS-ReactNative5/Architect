// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Cards /> can render? 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Cards
    goBack={[Function]}
    goTo={[Function]}
    location={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <ShowRoute
          component={[Function]}
          location={Object {}}
          onComplete={[Function]}
          path="/edit/:protocol/stage/:id?"
        />,
        <ShowRoute
          component={[Function]}
          location={Object {}}
          onComplete={[Function]}
          path="/edit/:protocol/skip/:id"
        />,
        <ShowRoute
          component={[Function]}
          location={Object {}}
          onComplete={[Function]}
          path="/edit/:protocol/form(s?)"
        />,
        <ShowRoute
          component={[Function]}
          location={Object {}}
          onComplete={[Function]}
          path="/edit/:protocol/form/:form?"
        />,
        <ShowRoute
          component={[Function]}
          location={Object {}}
          onComplete={[Function]}
          path="/edit/:protocol/codebook"
        />,
        <ShowRoute
          component={[Function]}
          location={Object {}}
          onComplete={[Function]}
          path="/edit/:protocol/codebook/:category/:type?"
        />,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "component": [Function],
          "location": Object {},
          "onComplete": [Function],
          "path": "/edit/:protocol/stage/:id?",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "component": [Function],
          "location": Object {},
          "onComplete": [Function],
          "path": "/edit/:protocol/skip/:id",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "component": [Function],
          "location": Object {},
          "onComplete": [Function],
          "path": "/edit/:protocol/form(s?)",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "component": [Function],
          "location": Object {},
          "onComplete": [Function],
          "path": "/edit/:protocol/form/:form?",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "component": [Function],
          "location": Object {},
          "onComplete": [Function],
          "path": "/edit/:protocol/codebook",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "component": [Function],
          "location": Object {},
          "onComplete": [Function],
          "path": "/edit/:protocol/codebook/:category/:type?",
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <ShowRoute
            component={[Function]}
            location={Object {}}
            onComplete={[Function]}
            path="/edit/:protocol/stage/:id?"
          />,
          <ShowRoute
            component={[Function]}
            location={Object {}}
            onComplete={[Function]}
            path="/edit/:protocol/skip/:id"
          />,
          <ShowRoute
            component={[Function]}
            location={Object {}}
            onComplete={[Function]}
            path="/edit/:protocol/form(s?)"
          />,
          <ShowRoute
            component={[Function]}
            location={Object {}}
            onComplete={[Function]}
            path="/edit/:protocol/form/:form?"
          />,
          <ShowRoute
            component={[Function]}
            location={Object {}}
            onComplete={[Function]}
            path="/edit/:protocol/codebook"
          />,
          <ShowRoute
            component={[Function]}
            location={Object {}}
            onComplete={[Function]}
            path="/edit/:protocol/codebook/:category/:type?"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "component": [Function],
            "location": Object {},
            "onComplete": [Function],
            "path": "/edit/:protocol/stage/:id?",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "component": [Function],
            "location": Object {},
            "onComplete": [Function],
            "path": "/edit/:protocol/skip/:id",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "component": [Function],
            "location": Object {},
            "onComplete": [Function],
            "path": "/edit/:protocol/form(s?)",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "component": [Function],
            "location": Object {},
            "onComplete": [Function],
            "path": "/edit/:protocol/form/:form?",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "component": [Function],
            "location": Object {},
            "onComplete": [Function],
            "path": "/edit/:protocol/codebook",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "component": [Function],
            "location": Object {},
            "onComplete": [Function],
            "path": "/edit/:protocol/codebook/:category/:type?",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
